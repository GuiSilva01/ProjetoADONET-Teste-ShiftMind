@model UsuarioModel

<!-- MAIN CONTENT -->
<div id="content">
    <div class="row">
        <div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
            <h1 class="page-title txt-color-blueDark">

                <!-- PAGE HEADER -->
                <i class="fa-fw fa fa-pencil-square-o"></i>
                Configurar
                <span>
                    >
                    @Html.ActionLink("Usuários", "Usuarios")
                </span>
            </h1>
        </div>
    </div>
    <!-- widget grid -->
    <section id="widget-grid" class="">


        <!-- START ROW -->

        <div class="row">

            <!-- NEW COL START -->
            <article class="col-sm-12 col-md-12 col-lg-6">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-1" data-widget-editbutton="false" data-widget-custombutton="false">
                    <header>
                        <span class="widget-icon"> <i class="fa fa-building"></i> </span>
                        <h2>Cadastro de Usuário </h2>

                    </header>

                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->
                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body no-padding">

                            @using (Html.BeginForm("Create", "ControleAcesso", FormMethod.Post,
new { id = "cadastrausuario-form", @class = "smart-form", novalidate = "novalidate" }))
                            {
                                @Html.AntiForgeryToken()
                            <fieldset>
                                <div class="row">
                                    <section class="col col-6">
                                        <label class="input">
                                            <i class="icon-prepend fa fa-building"></i>
                                            <input type="text" name="nome" placeholder="Nome">
                                            @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
                                        </label>
                                    </section>
                                    <section class="col col-6">
                                        <label class="input">
                                            <i class="icon-prepend fa fa-list-alt"></i>
                                            <input type="text" name="email" placeholder="E-mail">
                                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                        </label>
                                    </section>
                                </div>

                                <div class="row">
                                    <section class="col col-6">
                                        <label class="input">
                                            <i class="icon-prepend fa fa-building"></i>
                                            <input type="password" name="password" placeholder="Senha">
                                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                        </label>
                                    </section>
                                    <section class="col col-6">
                                        <label class="input">
                                            <i class="icon-append fa fa-chevron-down"></i>
                                            <input type="text" list="GrupoList" id="Grupo" name="Grupo" placeholder="Escolha o Grupo de Permissão">
                                            <datalist id="GrupoList">
                                                @foreach (var item in ViewBag.Grupos)
                                                {
                                                    <option data-value="@item.Id">@item.Name</option>
                                                }
                                            </datalist>
                                        </label>
                                        <label class="dropdown-menu">
                                            <i class="icon-prepend fa fa-list-alt"></i>
                                            @Html.ValidationMessageFor(model => model.Grupo, "", new { @class = "text-danger" })
                                        </label>
                                    </section>
                                </div>

                                <div class="row">
                                    <section class="col col-3">
                                        <label class="toggle">
                                            <input type="checkbox" name="ativo" checked="checked" value="true">
                                            <i data-swchon-text="SIM" data-swchoff-text="NÃO"></i>Ativo?
                                            @Html.ValidationMessageFor(model => model.Ativo, "", new { @class = "text-danger" })
                                        </label>
                                    </section>
                                </div>

                            </fieldset>
                                <footer>
                                    <button type="submit" class="btn btn-primary">
                                        Cadastrar
                                    </button>
                                </footer>
                            }
                        </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->
                </div>
                <!-- end widget -->
            </article>
            <!-- END COL -->
        </div>
        <!-- END ROW -->
    </section>
    <!-- end widget grid -->
</div>
<!-- END MAIN CONTENT -->

@section pagespecific {
    <script type="text/javascript">

        // DO NOT REMOVE : GLOBAL FUNCTIONS!

        $(document).ready(function () {

            //document.querySelector('input[list]').addEventListener('input', function (e) {
            //    var input = e.target,
            //        list = input.getAttribute('list'),
            //        options = document.querySelectorAll('#' + list + ' option'),
            //        hiddenInput = document.getElementById(input.id + 'ID'),
            //        inputValue = input.value;
            //    hiddenInput.value = "";

            //    for (var i = 0; i < options.length; i++) {
            //        var option = options[i];

            //        if (option.innerText === inputValue) {
            //            hiddenInput.value = option.getAttribute('data-value');
            //        }
            //    }
            //});

            var $checkoutForm = $('#cadastrausuario-form').validate({
                // Rules for form validation
                rules: {
                    //nome: {
                    //    required: true
                    //},
                    //cnpj: {
                    //    required: true
                    //}
                },

                // Messages for form validation
                messages: {
                    //nome: {
                    //    required: ''
                    //},
                    //cnpj: {
                    //    required: ''
                    //}
                },

                // Do not change code below
                errorPlacement: function (error, element) {
                    error.insertAfter(element.parent());
                }
            });

            var $registerForm = $("#smart-form-register").validate({

                // Rules for form validation
                rules: {
                    username: {
                        required: true
                    },
                    email: {
                        required: true,
                        email: true
                    },
                    password: {
                        required: true,
                        minlength: 3,
                        maxlength: 20
                    },
                    passwordConfirm: {
                        required: true,
                        minlength: 3,
                        maxlength: 20,
                        equalTo: '#password'
                    },
                    firstname: {
                        required: true
                    },
                    lastname: {
                        required: true
                    },
                    gender: {
                        required: true
                    },
                    terms: {
                        required: true
                    }
                },

                // Messages for form validation
                messages: {
                    login: {
                        required: 'Please enter your login'
                    },
                    email: {
                        required: 'Please enter your email address',
                        email: 'Please enter a VALID email address'
                    },
                    password: {
                        required: 'Please enter your password'
                    },
                    passwordConfirm: {
                        required: 'Please enter your password one more time',
                        equalTo: 'Please enter the same password as above'
                    },
                    firstname: {
                        required: 'Please select your first name'
                    },
                    lastname: {
                        required: 'Please select your last name'
                    },
                    gender: {
                        required: 'Please select your gender'
                    },
                    terms: {
                        required: 'You must agree with Terms and Conditions'
                    }
                },

                // Do not change code below
                errorPlacement: function (error, element) {
                    error.insertAfter(element.parent());
                }
            });

        })

    </script>
}